#!/usr/bin/php
<?php

class Console {

	const AUTOLOADER 			= 'public/src/core/misc/autoloader.php';
	const COMMAND_PATTERN = '/^[a-z0-9-_+]+$/';
	const COMMAND_DEFAULT	= 'help';

	protected $file 			= null;
	protected $command 		= null;
	protected $optionList = array();

	/**
	 * @param string[] $argumentList
	 */
	public function __construct($argumentList) {
		include_once self::AUTOLOADER;

		foreach ($argumentList as $argument) {
			$this->handleArgument(escapeshellcmd($argument));
		}
		$this->callCommand();
	}

	/**
	 * @param  string $argument
	 * @return Console
	 */
	protected function handleArgument($argument) {
		if ($this->file === null) {
			$this->file = $argument;
		}
		elseif ($this->command === null) {
			$this->command = strtolower($argument);
		}
		else {
			$this->optionList[] = $argument;
		}
		return $this;
	}

	/**
	 * @return Console
	 */
	protected function callCommand() {
		# set default value
		if ($this->command === null) {
			$this->command = self::COMMAND_DEFAULT;
			$this->info('use default command `'.self::COMMAND_DEFAULT.'`');
		}

		# check command
		try {
			$commandObject = self::getCommand($this->command);
		}
		catch (Exception $e) {
			$this->error($e->getMessage(), true);
		}

		# call command
		$commandObject->handle($this->optionList);
	}

	/**
	 * print info message
	 * @param  string $message
	 * @return Console
	 */
	protected function info($message) {
		return $this->outln('[INFO]  '.$message);
	}

	/**
	 * print error message
	 * @param  string $message
	 * @param  bool   $exit = false
	 * @return Console
	 */
	protected function error($message, $exit = false) {
		$this->outln('[ERROR] '.$message);
		if ($exit === true) {
			$this->info('early exit!');
			exit();
		}
		return $this;
	}

	/**
	 * print message
	 * @param  string $message
	 * @return Console
	 */
	protected function outln($message) {
		echo $message.PHP_EOL;
		return $this;
	}

	/**
	 * get command object by name
	 * @param  string $name
	 * @throws Exception if name invalid
	 * @throws Exception if not exists
	 * @throws Exception if class is abstract 
	 * @throws Exception if not instance of AbstractCommand 
	 * @return AbstractCommand
	 */
	final public static function getCommand($name) {
		$name = strtolower($name);

		# check command: pattern
		if (!preg_match(self::COMMAND_PATTERN, $name)) {
			throw new Exception('command name `'.$name.'` invalid', 1);
		}

		# check command: exists
		$namespace = ucfirst($name);
		if (!class_exists($namespace)) {
			throw new Exception('command `'.$name.'` not exists', 2);
		}

		# check command: abstract
		if ((new ReflectionClass($namespace))->isAbstract()) {
			throw new Exception('command `'.$name.'` is abstract', 3);
		}

		# check command: instance
		$object = new $namespace();
		if (!($object instanceof AbstractCommand)) {
			throw new Exception('command `'.$name.'` not instance of `AbstractCommand`', 4);
		}

		return $object;
	}

}

new Console($argv);