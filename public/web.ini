; MAP - Default-Config
; ====================
;
; This is the default config-file. Each config may overwrite the earlier. Apply-Sequence:
;
; 1. Default     -> File  ( `public/web.ini` )
; 2. All Add-Ons -> File  ( `public/addon/{ADD_ON}/addon.ini` )
; 3. Project     -> File  ( `private/web.ini` )
; 4. Area        -> File  ( `private/src/area/{AREA}/config/area.ini` )
; 5. Page        -> File  ( `private/src/area/{AREA}/config/page/{PAGE}.ini` )
; 6. Session     -> array ( `$_SESSION['config']` )
;


; Defaults (Group: default)
; -------------------------
;
; (!) Attention: Settable in Default-, Add-On- & Project-Config.
;
[default]
mode                  = 'site'
area                  = 'base'
page                  = 'home'


; Modes (Group: mode)
;
; Configure a mode. The key is matching the mode name.
;
; ### Required:
;
; {MODE}[type]      => The MIME-Type of the result.
; {MODE}[handler]   => Namespace of the mode-handler. Handler have to be child of `handler\mode\AbstractModeHandler`.
;
; ### Required (IF handler = `handler\mode\FileModeHandler`):
;
; {MODE}[folder]    => Folder in `private/src/area/{AREA}/app/` where target files located.
; {MODE}[extension] => The extension of the target file.
;
; ### Optionally (not supported by each handler):
;
; {MODE}[multiLang] => This is a truth value which indicate that this mode uses multi language (see group: multiLang).
;
[mode]
; CSS
style[type]           = 'text/css'
style[handler]        = 'handler\mode\FileModeHandler'
style[folder]         = 'style'
style[extension]      = '.css'
; JavaScript
script[type]          = 'text/javascript'
script[handler]       = 'handler\mode\FileModeHandler'
script[folder]        = 'script'
script[extension]     = '.js'
; PNG
graphic[type]         = 'image/png'
graphic[handler]      = 'handler\mode\FileModeHandler'
graphic[folder]       = 'graphic'
graphic[extension]    = '.png'
; JPEG
photo[type]           = 'image/jpeg'
photo[handler]        = 'handler\mode\FileModeHandler'
photo[folder]         = 'photo'
photo[extension]      = '.jpg'
; GIF
animation[type]       = 'image/gif'
animation[handler]    = 'handler\mode\FileModeHandler'
animation[folder]     = 'animation'
animation[extension]  = '.gif'


; Multi Languages (Group: multiLang)
; --------------------------------
;
; Use this to provide multi language applications. Outsource your texts into lang-files (INI).
;
; ### Required:
;
; language     => current application language
;
; ### Optionally:
;
; loadList[]   => Add a lang-file into include list. You can use all variables of the table below.
; autoAreaFile => Add automatically a lang-file into include-list. ( `@see util\Translator::$FILE_AUTO_AREA` )
; autoPageFile => Add automatically a lang-file into include-list. ( `@see util\Translator::$FILE_AUTO_PAGE` )
;
; ### Misc:
;
; | Variable: | Description:      |
; |-----------|-------------------|
; | {MODE}    | current mode name |
; | {AREA}    | current area name |
; | {PAGE}    | current page name |
; | {LANG}    | current language  |
;
[multiLang]
language              = 'english'
autoAreaFile          = FALSE
autoPageFile          = FALSE


; Aliases (Group: alias)
;
; There are four ways for aliases.
;
; ### Optionally:
;
; mode[{MODE}] => Value is the target mode.
; mode[{AREA}] => Value is the target area.
; mode[{PAGE}] => Value is the target page.
; mode[{HOST}] => Value is the target area. (!) Attention: 'www.example.org' and 'example.org' are different hosts.
;


; Exception handling (Group: exception)
; -------------------------------------
;
; In this group, you may configure exception handlers. All handler classes have to implement `handler\exception\ExceptionHandlerInterface`.
;
; devHandler[]  => DEV-Environment exception handler namespace
; prodHandler[] => PROD-Environment exception handler namespace
;
