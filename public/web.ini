; MAP - Default-Config
; ====================
;
; This is the default config-file. Each config may overwrite the earlier. Apply-Sequence:
;
; 1. Default     -> File  ( `public/web.ini` )
; 2. All Add-Ons -> File  ( `public/addon/{ADD_ON}/addon.ini` )
; 3. Project     -> File  ( `private/web.ini` )
; 4. Area        -> File  ( `private/src/area/{AREA}/config/area.ini` )
; 5. Page        -> File  ( `private/src/area/{AREA}/config/page/{PAGE}.ini` )
; 6. Session     -> array ( `$_SESSION['config']` )
;


; Defaults (Group: default)
; -------------------------
;
; (!) Attention: Settable in Default-, Add-On- & Project-Config.
;
; The mode 'site' does not exists. You need to install the Add-On 'mode-site'.
; Downloads: https://github.com/map-framework/addon-mode-site/releases
;
[default]
mode         = 'site'
area         = 'base'
page         = 'home'

; Modes
; -----
;
; Configure a mode in a group ( mode-{MODE} ) with the following keys:
;
; ### Required:
;
; type           => The MIME-Type of the result.
; handler        => Namespace of the mode handler. A handlers may require additional keys.
;
; ### Required (handler = `handler\mode\FileModeHandler`):
;
; folder         => Folder in `private/src/area/{AREA}/app/` where target files located.
; extension      => The extension of the target file.
;
; ### Optionally (handler = `handler\mode\FileModeHandler`):
;
; considerCommon => If target file not exists, try to open file in common app folder (Default: FALSE).
;
; ### Optionally (not supported by each handler):
;
; multiLang      => This is a truth value (default: FALSE) which indicate that this mode uses multi language (see group: multiLang).
;

[mode-style]
type         = 'text/css'
handler      = 'handler\mode\FileModeHandler'
folder       = 'style'
extension    = '.css'

[mode-script]
type         = 'text/javascript'
handler      = 'handler\mode\FileModeHandler'
folder       = 'script'
extension    = '.js'

[mode-graphic]
type         = 'image/png'
handler      = 'handler\mode\FileModeHandler'
folder       = 'graphic'
extension    = '.png'

[mode-photo]
type         = 'image/jpeg'
handler      = 'handler\mode\FileModeHandler'
folder       = 'photo'
extension    = '.jpg'

[mode-animation]
type         = 'image/gif'
handler      = 'handler\mode\FileModeHandler'
folder       = 'animation'
extension    = '.gif'

; Multi Languages (Group: multiLang)
; --------------------------------
;
; Use this to provide multi language applications. Outsource your texts into lang-files (INI).
;
; ### Required:
;
; language     => current application language
;
; ### Optionally:
;
; loadList[]   => Add a lang-file into include list. You can use all variables of the table below.
; autoAreaFile => Add automatically a lang-file into include-list. ( `@see util\Translator::$FILE_AUTO_AREA` )
; autoPageFile => Add automatically a lang-file into include-list. ( `@see util\Translator::$FILE_AUTO_PAGE` )
;
; ### Misc:
;
; | Variable: | Description:      |
; |-----------|-------------------|
; | {MODE}    | current mode name |
; | {AREA}    | current area name |
; | {PAGE}    | current page name |
; | {LANG}    | current language  |
;
[multiLang]
language     = 'english'
autoAreaFile = FALSE
autoPageFile = FALSE


; Aliases (Group: alias)
; ----------------------
;
; There are four ways for aliases.
;
; ### Optionally:
;
; mode[{MODE}] => Value is the target mode.
; mode[{AREA}] => Value is the target area.
; mode[{PAGE}] => Value is the target page.
; mode[{HOST}] => Value is the target area. (!) Attention: 'www.example.org' and 'example.org' are different hosts.
;


; Exception handling (Group: exception)
; -------------------------------------
;
; In this group, you may configure exception handlers. All handler classes have to implement `handler\exception\ExceptionHandlerInterface`.
;
; devHandler[]  => DEV-Environment exception handler namespace
; prodHandler[] => PROD-Environment exception handler namespace
;
